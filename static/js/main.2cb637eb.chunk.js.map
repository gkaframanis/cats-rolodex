{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","state","breed_id","breed","id","breed_name","name","breed_image_url","breed_temperament","temperament","fetch","this","headers","then","response","json","data","setState","url","className","alt","src","Component","CardList","breeds","map","SearchBox","placeholder","handleChange","type","onChange","App","e","searchField","target","value","Math","floor","random","filteredBreeds","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGqBA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,SAAUF,EAAMG,MAAMC,GACtBC,WAAYL,EAAMG,MAAMG,KACxBC,gBAAiB,GACjBC,kBAAmBR,EAAMG,MAAMM,aAPpB,E,qDAWnB,WAAqB,IAAD,OAChBC,MAAM,uDAAD,OAAwDC,KAAKV,MAAMC,SAAnE,uBAAkG,CACnGU,QAAS,CAAC,YAAa,0CAE1BC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAACV,gBAAiBS,EAAK,GAAGE,W,oBAG1D,WACI,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,QAAQC,IAAG,UAAMV,KAAKV,MAAMM,mBACrC,mCAAOI,KAAKV,MAAMI,WAAlB,OACA,kCAAMM,KAAKV,MAAMO,4B,GAzBCc,aCIrBC,G,MAAW,SAAAvB,GAEpB,OAAO,qBAAKmB,UAAU,YAAf,SACCnB,EAAMwB,OAAOC,KAAI,SAAAtB,GAAK,OACpB,cAAC,EAAD,CAAqBA,MAAOA,GAAjBA,EAAMC,WCNlBsB,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OACI,uBACIT,UAAU,SACVU,KAAK,SACLF,YAAcA,EACdG,SAAWF,MC2DRG,G,wDAnDb,aAAe,IAAD,8BACZ,gBAqBFH,aAAe,SAACI,GACd,EAAKf,SAAS,CAAEgB,YAAaD,EAAEE,OAAOC,SApBtC,EAAKlC,MAAQ,CACXuB,OAAQ,GACRS,YAAa,IALH,E,qDAUd,WAAqB,IAAD,OAClBvB,MAAM,qDAAD,OAAsD0B,KAAKC,MAAsB,GAAhBD,KAAKE,WAAkB,CAC3F1B,QAAS,CAAC,YAAa,0CAExBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAW,GAAM,OAAI,EAAKP,SAAS,CAAEO,OAAQA,S,oBAW1C,WAIE,MAAgCb,KAAKV,MAA7BuB,EAAR,EAAQA,OAAQS,EAAhB,EAAgBA,YACVM,EAAiBf,EAAOgB,QAAO,SAAArC,GAAK,OAAIA,EAAMG,KAAKmC,cAAcC,SAAST,EAAYQ,kBAE5F,OAQE,cAPA,CAOA,OAAKtB,UAAU,MAAf,UACE,8CACA,cAAC,EAAD,CAAWQ,YAAY,gBAAgBC,aAAejB,KAAKiB,eAC3D,cAAC,EAAD,CAAUJ,OAAQe,W,GA9CRjB,cCLHqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2cb637eb.chunk.js","sourcesContent":["import { Component } from \"react\";\nimport \"./card.styles.css\";\n\nexport default class Card extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            breed_id: props.breed.id,\n            breed_name: props.breed.name,\n            breed_image_url: \"\",\n            breed_temperament: props.breed.temperament,\n        }\n    }\n\n    componentDidMount() {\n        fetch(`https://api.thecatapi.com/v1/images/search?breed_id=${this.state.breed_id}&size=thumb&limit=1`, {\n            headers: {\"x-api-key\": \"c94359ed-158f-4b7d-920b-77821764c3c5\"}\n        })  \n        .then(response => response.json())\n        .then(data => this.setState({breed_image_url: data[0].url}));\n    }\n\n    render(){\n        return(\n            <div className=\"card-container\">\n                <img alt=\"breed\" src={ `${this.state.breed_image_url}`}/>\n                <h2> { this.state.breed_name } </h2>\n                <p> { this.state.breed_temperament }</p>\n            </div>\n        )\n    }\n}\n","import Card from \"../card/card.component\";\n\nimport \"./card-list.styles.css\";\n// This will be a functional component\n// Components take props are parameters. Props are any attribute we pass in the <CardList></CardList> and we get as an object.\n// Children prop is anything we put in between <CardList></CardList>\n// We can access the props in the App.js using this.props.\nexport const CardList = props => {\n    // We generate the prop children ourselves. We get the dogs from the props (check CardList in App.js)\n    return(<div className=\"card-list\">\n          { props.breeds.map(breed => (\n              <Card key={breed.id} breed={breed} />\n          ))}\n    </div>)\n}","import \"./search-box.styles.css\"\n\n// Functional Components they don't have access to state, since they have not access to the constructor() from the class we extend for.\n// All the props come as one big object, so we can destructure them..\n// handleChange is a function we pass to the Component.\nexport const SearchBox = ({ placeholder, handleChange }) => {\n    return (\n        <input\n            className=\"search\"\n            type=\"search\"\n            placeholder={ placeholder }\n            onChange={ handleChange }\n        />\n    )\n};","import { Component } from \"react\"; // To write a class\n\nimport { CardList } from \"./components/card-list/card-list.component\";\n\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nimport \"./App.css\";\n\n// By using class we have access to the state which a JS object.\n// Component also gives the setState function and render().\n// We have two ways to build components: either using functions or using classes.\n// https://jsonplaceholder.typicode.com/users | to get users in JSON format, so we don't hardcode our data. (array of user objects)\n// We use the Component.Lifecycle methods to get the data from the above link. The Component.Lifecycle are methods that can be called\n// at different stages when this component is getting rendered. \n\n// https://docs.thecatapi.com/api-reference\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      breeds: [],\n      searchField: \"\"\n    };\n  }\n\n  // When the component is loaded to the page then it does whatever we code in it.\n  componentDidMount() {\n    fetch(`https://api.thecatapi.com/v1/breeds?limit=10&page=${Math.floor(Math.random() * 10)}`, {\n      headers: {\"x-api-key\": \"c94359ed-158f-4b7d-920b-77821764c3c5\"}\n    })  // a Promise is returned\n    .then(response => response.json())  // We get a ReadableStream at the body of the response that we convert to JSON and a Promise is returned.\n    .then(breeds => this.setState({ breeds: breeds }));\n  }\n  // We are NOT allowed to modify state without calling the setState method.\n  // When the state changes, we rerender the component with the new state.\n  //Between the curly braces we can render and JavaScript we want\n\n  // Arrow functions bind \"this\" to the context where they were defined in. We don't need to call the bind function in our constructor.\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n\n  render() {\n    // onChange event changes the state and rerenders, so the filteredMonsters keeps changing.\n    // const monsters = this.state.monsters;\n    // const searchField = this.state.searchField;\n    const { breeds, searchField } = this.state; \n    const filteredBreeds = breeds.filter(breed => breed.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      // Syntax of JSX | not HTML | JSX mimics the html.\n      // We use the key because React needs to know what element it needs to update if one of these elements\n      // in our array has a value that changes. The key helps to know which element has been updated and to rerender just that one.\n      // We are passing the dogs as a prop from our App component\n      // onChange: whenever the input changes (SyncheticEvent) | we use JSX | e.target gives us the html and e.target.value gives us the string value.\n      // setState is an asynchronours function | it doesn't happen immediately as we expect it to.\n      // If we want to see or do something with our state right after we set it we have to do it inside the second argument callback function we pass to setState.\n      <div className=\"App\">\n        <h1>Cats Rolodex</h1>\n        <SearchBox placeholder=\"search breeds\" handleChange={ this.handleChange } />\n        <CardList breeds={filteredBreeds} />\n      </div>\n    )\n  }\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// The ReactDOM library replaces the element with id of root with our function <App /> that returns some html.\n// <App /> is our own custom component in the App.js file.\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}